/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** NgStyle allowed inputs */
export class NgStyleKeyValue {
    key;
    value;
    constructor(key, value, noQuotes = true) {
        this.key = key;
        this.value = value;
        this.key = noQuotes ? key.replace(/['"]/g, '').trim() : key.trim();
        this.value = noQuotes ? value.replace(/['"]/g, '').trim() : value.trim();
        this.value = this.value.replace(/;/, '');
    }
}
export function getType(target) {
    let what = typeof target;
    if (what === 'object') {
        return (target.constructor === Array) ? 'array' :
            (target.constructor === Set) ? 'set' : 'object';
    }
    return what;
}
/**
 * Split string of key:value pairs into Array of k-v pairs
 * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]
 */
export function buildRawList(source, delimiter = ';') {
    return String(source)
        .trim()
        .split(delimiter)
        .map((val) => val.trim())
        .filter(val => val !== '');
}
/** Convert array of key:value strings to a iterable map object */
export function buildMapFromList(styles, sanitize) {
    const sanitizeValue = (it) => {
        if (sanitize) {
            it.value = sanitize(it.value);
        }
        return it;
    };
    return styles
        .map(stringToKeyValue)
        .filter(entry => !!entry)
        .map(sanitizeValue)
        .reduce(keyValuesToMap, {});
}
/** Convert Set<string> or raw Object to an iterable NgStyleMap */
export function buildMapFromSet(source, sanitize) {
    let list = [];
    if (getType(source) === 'set') {
        source.forEach(entry => list.push(entry));
    }
    else {
        Object.keys(source).forEach((key) => {
            list.push(`${key}:${source[key]}`);
        });
    }
    return buildMapFromList(list, sanitize);
}
/** Convert 'key:value' -> [key, value] */
export function stringToKeyValue(it) {
    const [key, ...vals] = it.split(':');
    return new NgStyleKeyValue(key, vals.join(':'));
}
/** Convert [ [key,value] ] -> { key : value } */
export function keyValuesToMap(map, entry) {
    if (!!entry.key) {
        map[entry.key] = entry.value;
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtdHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnMvZmxleC1sYXlvdXQvZXh0ZW5kZWQvc3R5bGUvc3R5bGUtdHJhbnNmb3Jtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFZSCw2QkFBNkI7QUFDN0IsTUFBTSxPQUFPLGVBQWU7SUFDUDtJQUFvQjtJQUF2QyxZQUFtQixHQUFXLEVBQVMsS0FBYSxFQUFFLFFBQVEsR0FBRyxJQUFJO1FBQWxELFFBQUcsR0FBSCxHQUFHLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2xELElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRW5FLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsTUFBVztJQUNqQyxJQUFJLElBQUksR0FBRyxPQUFPLE1BQU0sQ0FBQztJQUN6QixJQUFJLElBQUksS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUN0QixPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxNQUFNLENBQUMsV0FBVyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUN0RCxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsU0FBUyxHQUFHLEdBQUc7SUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ2hCLElBQUksRUFBRTtTQUNOLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDaEIsR0FBRyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxrRUFBa0U7QUFDbEUsTUFBTSxVQUFVLGdCQUFnQixDQUFDLE1BQXNCLEVBQUUsUUFBMkI7SUFDbEYsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFtQixFQUFFLEVBQUU7UUFDNUMsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNiLEVBQUUsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDLENBQUM7SUFFRixPQUFPLE1BQU07U0FDUixHQUFHLENBQUMsZ0JBQWdCLENBQUM7U0FDckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUN4QixHQUFHLENBQUMsYUFBYSxDQUFDO1NBQ2xCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBZ0IsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFFRCxrRUFBa0U7QUFDbEUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFtQixFQUFFLFFBQTJCO0lBQzlFLElBQUksSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUN4QixJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUM3QixNQUFzQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSyxNQUFxQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBR0QsMENBQTBDO0FBQzFDLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxFQUFVO0lBQ3pDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxjQUFjLENBQUMsR0FBZSxFQUFFLEtBQXNCO0lBQ3BFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5leHBvcnQgdHlwZSBOZ1N0eWxlUmF3TGlzdCA9IHN0cmluZ1tdO1xuZXhwb3J0IHR5cGUgTmdTdHlsZU1hcCA9IHtba2xhc3M6IHN0cmluZ106IHN0cmluZ307XG4vLyBOZ1N0eWxlIHNlbGVjdG9ycyBhY2NlcHQgTmdTdHlsZVR5cGUgdmFsdWVzXG5leHBvcnQgdHlwZSBOZ1N0eWxlVHlwZSA9IHN0cmluZyB8IFNldDxzdHJpbmc+IHwgTmdTdHlsZVJhd0xpc3QgfCBOZ1N0eWxlTWFwO1xuXG4vKipcbiAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBTZWN1cml0eUNvbnRleHQuU1RZTEUgc2FuaXRpemF0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE5nU3R5bGVTYW5pdGl6ZXIgPSAodmFsOiBhbnkpID0+IHN0cmluZztcblxuLyoqIE5nU3R5bGUgYWxsb3dlZCBpbnB1dHMgKi9cbmV4cG9ydCBjbGFzcyBOZ1N0eWxlS2V5VmFsdWUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMga2V5OiBzdHJpbmcsIHB1YmxpYyB2YWx1ZTogc3RyaW5nLCBub1F1b3RlcyA9IHRydWUpIHtcbiAgICB0aGlzLmtleSA9IG5vUXVvdGVzID8ga2V5LnJlcGxhY2UoL1snXCJdL2csICcnKS50cmltKCkgOiBrZXkudHJpbSgpO1xuXG4gICAgdGhpcy52YWx1ZSA9IG5vUXVvdGVzID8gdmFsdWUucmVwbGFjZSgvWydcIl0vZywgJycpLnRyaW0oKSA6IHZhbHVlLnRyaW0oKTtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5yZXBsYWNlKC87LywgJycpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKHRhcmdldDogYW55KTogc3RyaW5nIHtcbiAgbGV0IHdoYXQgPSB0eXBlb2YgdGFyZ2V0O1xuICBpZiAod2hhdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gKHRhcmdldC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpID8gJ2FycmF5JyA6XG4gICAgICAgICh0YXJnZXQuY29uc3RydWN0b3IgPT09IFNldCkgPyAnc2V0JyA6ICdvYmplY3QnO1xuICB9XG4gIHJldHVybiB3aGF0O1xufVxuXG4vKipcbiAqIFNwbGl0IHN0cmluZyBvZiBrZXk6dmFsdWUgcGFpcnMgaW50byBBcnJheSBvZiBrLXYgcGFpcnNcbiAqIGUuZy4gICdrZXk6dmFsdWU7IGtleTp2YWx1ZTsga2V5OnZhbHVlOycgLT4gWydrZXk6dmFsdWUnLC4uLl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUmF3TGlzdChzb3VyY2U6IGFueSwgZGVsaW1pdGVyID0gJzsnKTogTmdTdHlsZVJhd0xpc3Qge1xuICByZXR1cm4gU3RyaW5nKHNvdXJjZSlcbiAgICAgIC50cmltKClcbiAgICAgIC5zcGxpdChkZWxpbWl0ZXIpXG4gICAgICAubWFwKCh2YWw6IHN0cmluZykgPT4gdmFsLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsID0+IHZhbCAhPT0gJycpO1xufVxuXG4vKiogQ29udmVydCBhcnJheSBvZiBrZXk6dmFsdWUgc3RyaW5ncyB0byBhIGl0ZXJhYmxlIG1hcCBvYmplY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZE1hcEZyb21MaXN0KHN0eWxlczogTmdTdHlsZVJhd0xpc3QsIHNhbml0aXplPzogTmdTdHlsZVNhbml0aXplcik6IE5nU3R5bGVNYXAge1xuICBjb25zdCBzYW5pdGl6ZVZhbHVlID0gKGl0OiBOZ1N0eWxlS2V5VmFsdWUpID0+IHtcbiAgICBpZiAoc2FuaXRpemUpIHtcbiAgICAgIGl0LnZhbHVlID0gc2FuaXRpemUoaXQudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gaXQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlc1xuICAgICAgLm1hcChzdHJpbmdUb0tleVZhbHVlKVxuICAgICAgLmZpbHRlcihlbnRyeSA9PiAhIWVudHJ5KVxuICAgICAgLm1hcChzYW5pdGl6ZVZhbHVlKVxuICAgICAgLnJlZHVjZShrZXlWYWx1ZXNUb01hcCwge30gYXMgTmdTdHlsZU1hcCk7XG59XG5cbi8qKiBDb252ZXJ0IFNldDxzdHJpbmc+IG9yIHJhdyBPYmplY3QgdG8gYW4gaXRlcmFibGUgTmdTdHlsZU1hcCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTWFwRnJvbVNldChzb3VyY2U6IE5nU3R5bGVUeXBlLCBzYW5pdGl6ZT86IE5nU3R5bGVTYW5pdGl6ZXIpOiBOZ1N0eWxlTWFwIHtcbiAgbGV0IGxpc3Q6IHN0cmluZ1tdID0gW107XG4gIGlmIChnZXRUeXBlKHNvdXJjZSkgPT09ICdzZXQnKSB7XG4gICAgKHNvdXJjZSBhcyBTZXQ8c3RyaW5nPikuZm9yRWFjaChlbnRyeSA9PiBsaXN0LnB1c2goZW50cnkpKTtcbiAgfSBlbHNlIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBsaXN0LnB1c2goYCR7a2V5fTokeyhzb3VyY2UgYXMgTmdTdHlsZU1hcClba2V5XX1gKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYnVpbGRNYXBGcm9tTGlzdChsaXN0LCBzYW5pdGl6ZSk7XG59XG5cblxuLyoqIENvbnZlcnQgJ2tleTp2YWx1ZScgLT4gW2tleSwgdmFsdWVdICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9LZXlWYWx1ZShpdDogc3RyaW5nKTogTmdTdHlsZUtleVZhbHVlIHtcbiAgY29uc3QgW2tleSwgLi4udmFsc10gPSBpdC5zcGxpdCgnOicpO1xuICByZXR1cm4gbmV3IE5nU3R5bGVLZXlWYWx1ZShrZXksIHZhbHMuam9pbignOicpKTtcbn1cblxuLyoqIENvbnZlcnQgWyBba2V5LHZhbHVlXSBdIC0+IHsga2V5IDogdmFsdWUgfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtleVZhbHVlc1RvTWFwKG1hcDogTmdTdHlsZU1hcCwgZW50cnk6IE5nU3R5bGVLZXlWYWx1ZSk6IE5nU3R5bGVNYXAge1xuICBpZiAoISFlbnRyeS5rZXkpIHtcbiAgICBtYXBbZW50cnkua2V5XSA9IGVudHJ5LnZhbHVlO1xuICB9XG4gIHJldHVybiBtYXA7XG59XG4iXX0=